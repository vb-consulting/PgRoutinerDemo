// <auto-generated />
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Norm;
using FluentAssertions;
using CompaniesDb.Extensions;
using CompaniesWebBlazor.Shared;

namespace CompaniesDbTests
{
    public class CreateCompanyOnConflictDoUpdateReturningUnitTests : PostgreSqlUnitTestFixture
    {
        public CreateCompanyOnConflictDoUpdateReturningUnitTests(PostgreSqlFixture fixture) : base(fixture) { }

        [Fact]
        public void CreateCompanyOnConflictDoUpdateReturning_Test1()
        {
            // Arrange
            var model = new Company { Name = "n", NameNormalized = "nn", About = "about", AreaId = 1, Website = "website" };

            // Act
            var result = Connection.CreateCompanyOnConflictDoUpdateReturning(model);

            // Assert
            model.Should().BeEquivalentTo(result,
                o => o.Excluding(c => c.Id).Excluding(c => c.Modified)); // Id and Modified are generated fields
        }


        [Fact]
        public void CreateCompanyOnConflictDoUpdateReturning_Test1_Upsert()
        {
            // Arrange
            var model1 = new Company { Name = "n", NameNormalized = "nn", About = "about", AreaId = 1, Website = "website" };
            var model2 = new Company { Name = "n2", NameNormalized = "nn", About = "about2", AreaId = 1, Website = "website2" };

            // Act
            var result1 = Connection.CreateCompanyOnConflictDoUpdateReturning(model1);
            var result2 = Connection.CreateCompanyOnConflictDoUpdateReturning(model2, "name_normalized"); // name_normalized is unique index

            // Assert
            model2.Should().BeEquivalentTo(result2,
                o => o.Excluding(c => c.Id).Excluding(c => c.Modified)); // Id and Modified are generated fields
            Assert.Equal(result1.Id, result2.Id); // confirm that it is indeed same record updated
        }
    }
}
