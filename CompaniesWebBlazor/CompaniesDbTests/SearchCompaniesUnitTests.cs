// <auto-generated />
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Norm;
using FluentAssertions;
using CompaniesDb.Extensions;
using Newtonsoft.Json;
using CompaniesWebBlazor.Shared;

namespace CompaniesDbTests
{
    public class SearchCompaniesUnitTests : PostgreSqlUnitTestFixture
    {
        public SearchCompaniesUnitTests(PostgreSqlFixture fixture) : base(fixture) { }

        private void AddRecords()
        {
            Connection.CreateCompanyOnConflictDoUpdateReturning(new Company { Name = "n1", NameNormalized = "n1", About = "a1", AreaId = 1, Website = "ws1" });
            Connection.CreateCompanyOnConflictDoUpdateReturning(new Company { Name = "n2", NameNormalized = "n2", About = "a2", AreaId = 2, Website = "ws2" });
            Connection.CreateCompanyOnConflictDoUpdateReturning(new Company { Name = "n3", NameNormalized = "n3", About = "a3", AreaId = 3, Website = "ws3" });
            Connection.CreateCompanyOnConflictDoUpdateReturning(new Company { Name = "n4", NameNormalized = "n4", About = "a4", AreaId = 4, Website = "ws4" });
            Connection.CreateCompanyOnConflictDoUpdateReturning(new Company { Name = "n5", NameNormalized = "n5", About = "a5", AreaId = 5, Website = "ws5" });

        }

        [Fact]
        public void SearchCompanies_Test1()
        {
            // Arrange
            AddRecords();

            string filter = "{}";
            int? page = 1;
            int? pageSize = 2;

            // Act
            var result = JsonConvert.DeserializeObject<SearchResults>(Connection.SearchCompanies(filter, page, pageSize));

            // Assert
            Assert.Equal(5, result.Count);
            Assert.Equal(2, result.Page.Count);
            Assert.Equal("n1", result.Page.ElementAt(0).Name);
            Assert.Equal("n2", result.Page.ElementAt(1).Name);
        }

        [Fact]
        public void SearchCompanies_Test2_Search()
        {
            // Arrange
            AddRecords();

            string filter = @"{""search"": ""n1""}";
            int? page = 1;
            int? pageSize = 2;

            // Act
            var result = JsonConvert.DeserializeObject<SearchResults>(Connection.SearchCompanies(filter, page, pageSize));

            // Assert
            Assert.Equal(1, result.Count);
            Assert.Single(result.Page);
            Assert.Equal("n1", result.Page.ElementAt(0).Name);
        }

        [Fact]
        public void SearchCompanies_Test2_AreaId()
        {
            // Arrange
            AddRecords();

            string filter = @"{""areaId"": 5}";
            int? page = 1;
            int? pageSize = 2;

            // Act
            var result = JsonConvert.DeserializeObject<SearchResults>(Connection.SearchCompanies(filter, page, pageSize));

            // Assert
            Assert.Equal(1, result.Count);
            Assert.Single(result.Page);
            Assert.Equal("n5", result.Page.ElementAt(0).Name);
        }
    }
}
