/* PgRoutiner (3.3.2.0) settings */
{
  /* see https://github.com/vb-consulting/PgRoutiner/wiki/10.-WORKING-WITH-CONNECTIONS for more info */
  "ConnectionStrings": {
    "CompaniesDb": "postgresql://postgres:postgres@localhost:5434/companies_web_demo"
    //"Connection1": "Server={server};Db={database};Port={port};User Id={user};Password={password};"
    //"Connection2": "postgresql://{user}:{password}@{server}:{port}/{database}" 
  },
  /* see https://github.com/vb-consulting/PgRoutiner/wiki/1.-WORKING-WITH-SETTINGS for more info */
  "PgRoutiner": {

    /*
      General settings:
      - Use "-c" or "--connection" option to set working connection from the command line.
      - Use "-sch" or "--schema" option to set schema similar to expression from the command line.
      - Use "-x" or "--execute" option to execute SQL file or PSQL command on your current connection  from the command line.
      - Use "-d" or "--dump" switch to redirect all outputs to the command line.
      - For more info see: https://github.com/vb-consulting/PgRoutiner/wiki/1.-WORKING-WITH-SETTINGS#general-settings
    */
    "Connection": "CompaniesDb",
    "SkipConnectionPrompt": false,
    "Schema": null,
    "Execute": null,
    "Dump": false,
    "SkipIfExists": [],
    "SkipUpdateReferences": false,
    "PgDump": "pg_dump",
    "PgDumpFallback": "C:\\Program Files\\PostgreSQL\\{0}\\bin\\pg_dump.exe",

    /*
      Code generation general settings. Used in:
      - Routines code generation.
      - CRUD code generation.
    */
    "Namespace": null,
    "UseRecords": false,
    "UseExpressionBody": false,
    "Mapping": {
      "text": "string",
      "character": "string",
      "xml": "string",
      "inet": "string",
      "daterange": "TimeSpan",
      "double precision": "double",
      "boolean": "bool",
      "smallint": "short",
      "timestamp with time zone": "DateTime",
      "timestamp without time zone": "DateTime",
      "bigint": "long",
      "time with time zone": "DateTime",
      "time without time zone": "DateTime",
      "char": "string",
      "date": "DateTime",
      "numeric": "decimal",
      "character varying": "string",
      "jsonb": "string",
      "real": "float",
      "json": "string",
      "integer": "int",
      "bpchar": "string",
      "float8": "double",
      "bool": "bool",
      "int2": "short",
      "timestamptz": "DateTime",
      "int8": "long",
      "timetz": "DateTime",
      "time": "DateTime",
      "varchar": "string",
      "float4": "float",
      "int4": "int"
    },
    "CustomModels": { "Companies": "Company", "CompanyAreas":  "CompanyArea" },
    "ModelDir": "../Shared",
    "ModelCustomNamespace": "CompaniesWebBlazor.Shared",
    "EmptyModelDir": false,
    "SkipSyncMethods": false,
    "SkipAsyncMethods": false,
    "MinNormVersion": "3.2.0",
    "SourceHeader": "// <auto-generated />",
    "Ident": 4,
    "SingleLinqMethod": "SingleOrDefault",

    /*
      Routines data-access extensions code-generation
      - Use "-r" or "--routines" switch to run routines data-access extensions code-generation from the command line.
      - Use "-o" or "--output-dir" option to set the output dir for the generated code from the command line.
      - Use "-row" or "--routines-overwrite" switch to set the overwrite mode for the generated code from the command line.
      - Use "-md" or "--model-dir" option to set the custom models output dir for the generated code from the command line.
      - For more info see: https://github.com/vb-consulting/PgRoutiner/wiki/2.-WORKING-WITH-ROUTINES#routines-data-access-extensions-code-generation-settings
    */
    "Routines": true,
    "OutputDir": "./Extensions",
    "RoutinesEmptyOutputDir": true,
    "RoutinesOverwrite": true,
    "RoutinesAskOverwrite": false,
    "NotSimilarTo": null,
    "SimilarTo": null,

    /*
      Unit tests code-generation settings
      - Use "-ut" or "--unit-tests" switch to run unit tests code-generation from the command line.
      - Use "-utd" or "--unit-tests-dir" option to set the output dir for the generated unit test project from the command line.
      - For more info see: https://github.com/vb-consulting/PgRoutiner/wiki/3.-WORKING-WITH-UNIT-TESTS#unit-tests-code-generation-settings
    */
    "UnitTests": true,
    "UnitTestsDir": "../{0}Tests",
    "UnitTestsAskRecreate": false,
    "UnitTestsSkipSyncMethods": false,
    "UnitTestsSkipAsyncMethods": true,

    /*
      Schema dump script settings
      - Use "-sd" or "--schema-dump" switch to run schema script dump from the command line.
      - Use "-sdf" or "--schema-dump-file" option to set generated schema file name from the command line.
      - Use "-scow" or "--schema-dump-overwrite" switch to set the overwrite mode for the generated schema file from the command line.
      - Use "--schema-dump-privileges" switch to include object privileges in schema file from the command line.
      - For more info see: https://github.com/vb-consulting/PgRoutiner/wiki/4.-WORKING-WITH-SCHEMA-DUMP-SCRIPT#schema-dump-script-settings
    */
    "SchemaDump": true,
    "SchemaDumpFile": "./Scripts/Schema.sql",
    "SchemaDumpOverwrite": true,
    "SchemaDumpAskOverwrite": false,
    "SchemaDumpOwners": false,
    "SchemaDumpPrivileges": false,
    "SchemaDumpNoDropIfExists": false,
    "SchemaDumpOptions": null,
    "SchemaDumpNoTransaction": false,

    /*
      Data dump script settings
      - Use "-dd" or "--data-dump" switch to run data script dump from the command line.
      - Use "-ddf" or "--data-dump-file" option to set generated data script file name from the command line.
      - Use "-ddow" or "--data-dump-overwrite" switch to set the overwrite mode for the generated data script file from the command line.
      - For more info see: https://github.com/vb-consulting/PgRoutiner/wiki/5.-WORKING-WITH-DATA-DUMP-SCRIPT#data-dump-script-settings
    */
    "DataDump": true,
    "DataDumpFile": "./Scripts/Data.sql",
    "DataDumpOverwrite": true,
    "DataDumpAskOverwrite": false,
    "DataDumpTables": [ "company_areas" ],
    "DataDumpOptions": null,
    "DataDumpNoTransaction": false,

    /*
      Object file tree settings
      - Use "-db" or "--db-objects" switch to run object files tree dump from the command line.
      - Use "-dbd" or "--db-objects-dir" option to set the root output dir from the command line.
      - Use "-dbow" or "--db-objects-overwrite" switch to set the overwrite mode for the generated files from the command line.
      - For more info see: https://github.com/vb-consulting/PgRoutiner/wiki/6.-WORKING-WITH-OBJECT-FILES-TREE#object-file-tree-settings
    */
    "DbObjects": true,
    "DbObjectsDir": "./Scripts/",
    "DbObjectsOverwrite": true,
    "DbObjectsAskOverwrite": false,
    "DbObjectsDirNames": {
      "Tables": "Tables",
      "Views": "Views",
      "Functions": "Functions",
      "Procedures": "Procedures",
      "Domains": "Domains",
      "Types": "Types",
      "Schemas": "Schemas",
      "Sequences": "Sequences"
    },
    "DbObjectsSkipDeleteDir": false,
    "DbObjectsOwners": false,
    "DbObjectsPrivileges": false,
    "DbObjectsDropIfExists": false,
    "DbObjectsCreateOrReplace": true,
    "DbObjectsRaw": false,

    /*
      Markdown (MD) database dictionaries settings
      - Use "-md" or "--markdown" switch to run markdown (MD) database dictionary file from the command line.
      - Use "-mdf" or "--md-file" option to set generated dictionary file name from the command line.
      - Use "-cc" or "--commit-md" switch to run commit changes in comments from the MD file back to the database from the command line.
      - For more info see: https://github.com/vb-consulting/PgRoutiner/wiki/7.-WORKING-WITH-MARKDOWN-DATABASE-DICTIONARIES#markdown-md-database-dictionaries-settings
    */
    "Markdown": true,
    "MdFile": "./README.md",
    "MdOverwrite": true,
    "MdAskOverwrite": false,
    "MdSkipRoutines": false,
    "MdSkipViews": false,
    "MdNotSimilarTo": null,
    "MdSimilarTo": null,
    "CommitMd": false,

    /*
      PSQL command-line utility settings
      - Use "-psql" or "--psql" switch to open PSQL command-line utility from the command line.
      - For more info see: https://github.com/vb-consulting/PgRoutiner/wiki/8.-WORKING-WITH-PSQL#psql-command-line-utility-settings
    */
    "Psql": false,
    "PsqlTerminal": "wt",
    "PsqlCommand": "psql",
    "PsqlOptions": null,

    /*
      Diff scripts settings
      - Use "-diff" or "--diff" switch to run diff script generation from the command line.
      - Use "-diff-target" or "--diff-target" option to set target connection for the diff script generator from the command line.
      - For more info see: https://github.com/vb-consulting/PgRoutiner/wiki/9.-WORKING-WITH-DIFF-SCRIPTS#diff-scripts-settings
    */
    "Diff": false,
    "DiffTarget": null,
    "DiffFilePattern": "./Database/{0}-{1}/{2}-diff-{3:yyyyMMdd}.sql",
    "DiffPgDump": "pg_dump",
    "DiffPrivileges": false,

    /*
      CRUD scripts settings
      - Use "-crud" or "--crud" switch to run CRUD extension methods generation from the command line.
      - Use "-crud-o" or "--crud-output-dir" option to set the custom models output dir for the generated CRUD extension methods code from the command line.
      - For more info see: https://github.com/vb-consulting/PgRoutiner/wiki/10.-WORKING-WITH-CRUD#crud-settings
    */
    "Crud": true,
    "CrudOutputDir": "./Extensions",
    "CrudEmptyOutputDir": true,
    "CrudOverwrite": true,
    "CrudAskOverwrite": false,
    "CrudNoPrepare": false,
    "CrudCreate": [],
    "CrudCreateReturning": [],
    "CrudCreateOnConflictDoNothing": [],
    "CrudCreateOnConflictDoNothingReturning": [],
    "CrudCreateOnConflictDoUpdate": [],
    "CrudCreateOnConflictDoUpdateReturning": [ "companies" ],
    "CrudReadBy": [ "companies" ],
    "CrudReadAll": [ "company_areas" ],
    "CrudUpdate": [],
    "CrudUpdateReturning": [],
    "CrudDelete": [ "companies" ],
    "CrudDeleteReturning": []
  }
}
