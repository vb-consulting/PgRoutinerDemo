// <auto-generated />
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Norm;
using NpgsqlTypes;
using Npgsql;
using CompaniesDb.Models;

namespace CompaniesDb.Extensions
{
    public static class CompanyReadBy
    {
        public const string Name = "companies";

        public const string Sql = @"
            SELECT
                ""id"",
                ""name"",
                ""name_normalized"",
                ""website"",
                ""area_id"",
                ""about"",
                ""modified""
            FROM
                ""companies""
            WHERE
                ""id"" = @id";

        /// <summary>
        /// Select table ""companies"" by primary keys and return a single record mapped to an instance of a "CompaniesDb.Extensions.Company" class.
        /// </summary>
        /// <param name="id">Select table ""companies"" where field id bigint is this value.</param>
        /// <returns>Single instance of a "CompaniesDb.Extensions.Company" class that is mapped to resulting record of table ""companies""</returns>
        public static Company ReadCompanyById(this NpgsqlConnection connection, long id)
        {
            return connection
                .Prepared()
                .Read<Company>(Sql, 
                    ("id", id, NpgsqlDbType.Bigint))
                .SingleOrDefault();
        }

        /// <summary>
        /// Asynchronously select table ""companies"" by primary keys and return a single record mapped to an instance of a "CompaniesDb.Extensions.Company" class.
        /// </summary>
        /// <param name="id">Select table ""companies"" where field id bigint is this value.</param>
        /// <returns>ValueTask whose Result property is a single instance of a "CompaniesDb.Extensions.Company" class that is mapped to resulting record of table ""companies""</returns>
        public static async ValueTask<Company> ReadCompanyByIdAsync(this NpgsqlConnection connection, long id)
        {
            return await connection
                .Prepared()
                .ReadAsync<Company>(Sql, 
                    ("id", id, NpgsqlDbType.Bigint))
                .SingleOrDefaultAsync();
        }
    }
}
