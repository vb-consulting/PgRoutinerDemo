// <auto-generated />
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Norm;
using FluentAssertions;
using CompaniesDb.Extensions;
using Npgsql;
using Xunit.Abstractions;
using CompaniesDb.Models;
using Bogus;

namespace CompaniesDbTests
{
    public class _InsertSeedData
    {
        private readonly ITestOutputHelper output;

        public _InsertSeedData(ITestOutputHelper output)
        {
            this.output = output;
        }

        [Fact]
        public void Run()
        {
            var table = CompanyCreateOnConflictDoUpdateReturning.Name;
            using var connection = new NpgsqlConnection(Config.ConnectionString);
            var count = connection.Read<long>($"select count(*) from {table}").Single();
            if (count > 0)
            {
                output.WriteLine("Database already seeded, exiting...");
                Console.WriteLine("Database already seeded, exiting...");
                return;
            }

            var (minAreaId, maxAreaId) = connection.Read<int, int>($"select min(id), max(id) from {CompanyAreaReadAll.Name}").Single();

            var companies = new Faker<Company>()
                .RuleFor(c => c.Id, (f, c) => c.Id = default)
                .RuleFor(c => c.Name, f => f.Company.CompanyName())
                .RuleFor(c => c.NameNormalized, (f, c) => c.NameNormalized = c.Name.ToLower())
                .RuleFor(c => c.Website, f => f.Internet.Url().ToLower())
                .RuleFor(c => c.AreaId, f => f.Random.Number(minAreaId, maxAreaId))
                .RuleFor(c => c.About, f => f.Company.Bs())
                .Generate(3000);

            connection.Execute("begin");

            try
            {
                foreach(var company in companies)
                {
                    connection.CreateCompanyOnConflictDoUpdateReturning(company, "name_normalized");
                }
            }
            catch
            {
                connection.Execute("rollback");
                throw;
            }
            finally
            {
                connection.Execute("commit");
            }
        }
    }
}
